set.seed(123)
x2 <- runif(50, -3, 1)
y2 <- x2 + 3 + rnorm(50, 0, 0.3)
plot(x2, y2, cex = 0.5)
set.seed(123)
x1 <- runif(50, -1, 3)
y1 <- x1 - 3 + rnorm(50, 0, 0.3)
plot(x1, y1, cex = 0.5)
set.seed(123)
x2 <- runif(50, -3, 1)
y2 <- x2 + 3 + rnorm(50, 0, 0.3)
plot(x2, y2, cex = 0.5)
x <- c(x1, x2)
y <- c(y1, y2)
plot(x, y, cex = 0.5)
cor(x, y)
n <- 1000
x <- runif(n, -2, 2)
X <- seq(.5 / n, 1 - .5 / n, length = n)
Q <- qunif(X, 0, 1)
plot(Q, sort(x), col = 2, cex = 0.5)
abline(-2, 4)
n <- 1000
x <- rexp(n, 2)
X <- seq(.5 / n, 1 - .5 / n, length = n)
Q <- qexp(X, 1)
plot(Q, sort(x), col = 2, cex = 0.5)
abline(0, 1/2)
set.seed(123)
x_1 <- runif(50, -1, 3)
y_1 <- x_1 - 3 + rnorm(50, 0, 0.3)
plot(x_1, y_1, cex = 0.5)
set.seed(123)
x_2 <- runif(50, -3, 1)
y_2 <- x_2 + 3 + rnorm(50, 0, 0.3)
plot(x_2, y_2, cex = 0.5)
x <- c(x_1, x_2)
y <- c(y_1, y_2)
plot(x, y, cex = 0.5)
cor(x, y) #-0.1672815
MoE <- c(29.8, 33.2, 33.7, 35.3, 35.5, 36.1, 36.2, 36.3, 37.5, 37.7, 38.7, 38.8, 39.6, 41.0, 42.8, 42.8, 43.5, 45.6, 46.0, 46.9, 48.0, 49.3, 51.7, 62.6, 69.8, 79.5, 80.0)
Strength <- c(5.9, 7.2, 7.3, 6.3, 8.1, 6.8, 7.0, 7.6, 6.8, 6.5, 7.0, 6.3, 7.9, 9.0, 8.2, 8.7, 7.8, 9.7, 7.4, 7.7, 9.7, 7.8, 7.7, 11.6, 11.3, 11.8, 10.7)
plot(MoE, Strength)
boxplot(MoE)
boxplot(Strength)
qqnorm(MoE)
qqnorm(Strength)
mean(MoE)
mean(Strength)
mean(MoE * Strength)
mean(MoE^2)
mean(MoE)^2
mean(MoE) * mean(Strength)
sum((MoE - mean(MoE))^2)
sum((Strength - mean(Strength))^2)
cor(MoE, Strength)
sum((3.292506 + 0.107482 * MoE - Strength)^2)
dat <- read.table("https://sites.stat.washington.edu/marzban/390/winter21/transform_dat.txt", header = T)
x <- dat[,1]
y <- dat[,2]
plot(x,y)
plot(sqrt(x), y)
lm.c <- lm(y~sqrt(x))
abline(lm.c)
y_hat <- predict(lm.c)
SST <- sum((y-mean(y)) ^ 2)
SSE <- sum((y-y_hat) ^ 2)
R_2 <- 1 - SSE/SST
s_e <- sqrt(SSE/ (length(x)-2))
dat <- read.csv('/Users/zihanlin/Desktop/School/courses/STAT390/hw.csv', header = T)
temperature <- [,4]
dat <- read.csv('/Users/zihanlin/Desktop/School/courses/STAT390/hw.csv', header = T)
temperature <- dat[,4]
precipitation <- dat[,3]
x <- temperature
y <- precipitation
lm.b <- lm(y~x)
abline(lm.b)
dat <- read.csv('/Users/zihanlin/Desktop/School/courses/STAT390/hw.csv', header = T)
temperature <- dat[,4]
precipitation <- dat[,3]
x <- temperature
y <- precipitation
lm.b <- lm(y~x)
plot(x,y)
abline(lm.b)
y_hat <- predict(lm.b)
SST <- sum((y- mean(y))^2)
SSE <- sum((y-y_hat)^2)
R_2 <- 1-SSE/SST
s_e <- sqrt(SSE/(length(x)-2))
View(lm.b)
x <- log(x)
y <- log(y)
plot(x, y)
lm.e <- lm(y~x)
abline(lm.e)
dat <- read.csv('/Users/zihanlin/Desktop/School/courses/STAT390/hw.csv', header = T)
temperature <- dat[,4]
precipitation <- dat[,3]
x <- temperature
y <- precipitation
lm.b <- lm(y~x)
plot(x,y)
abline(lm.b)
y_hat <- predict(lm.b)
SST <- sum((y- mean(y))^2)
SSE <- sum((y-y_hat)^2)
R_2 <- 1-SSE/SST
s_e <- sqrt(SSE/(length(x)-2))
x <- log(x+2)
y <- log(y)
lm.e <- (y~x)
plot(x,y)
abline(y~x)
dat <- read.csv('/Users/zihanlin/Desktop/School/courses/STAT390/hw.csv', header = T)
temperature <- dat[,4]
precipitation <- dat[,3]
x <- temperature
y <- precipitation
lm.b <- lm(y~x)
plot(x,y)
abline(lm.b)
y_hat <- predict(lm.b)
SST <- sum((y- mean(y))^2)
SSE <- sum((y-y_hat)^2)
R_2 <- 1-SSE/SST
s_e <- sqrt(SSE/(length(x)-2))
x <- sqrt(x+2)
y <- sqrt(y)
lm.e <- (y~x)
plot(x,y)
abline(y~x)
dat <- read.csv('/Users/zihanlin/Desktop/School/courses/STAT390/hw.csv', header = T)
temperature <- dat[,4]
precipitation <- dat[,3]
x <- temperature
y <- precipitation
lm.b <- lm(y~x)
plot(x,y)
abline(lm.b)
y_hat <- predict(lm.b)
SST <- sum((y- mean(y))^2)
SSE <- sum((y-y_hat)^2)
R_2 <- 1-SSE/SST
s_e <- sqrt(SSE/(length(x)-2))
x <- sqrt(x+2)
y <- sqrt(y)
lm.e <- (y~x)
plot(x,y)
abline(lm.e)
dat <- read.csv('/Users/zihanlin/Desktop/School/courses/STAT390/hw.csv', header = T)
temperature <- dat[,4]
precipitation <- dat[,3]
x <- temperature
y <- precipitation
x <- sqrt(x+2)
y <- sqrt(y)
lm.e <- (y~x)
plot(x,y)
abline(lm.e)
dat <- read.csv('/Users/zihanlin/Desktop/School/courses/STAT390/hw.csv', header = T)
temperature <- dat[,4]
precipitation <- dat[,3]
x <- sqrt(temperature+2)
y <- sqrt(precipitation)
lm.e <- (y~x)
plot(x,y)
abline(lm.e)
n <- 10^7
x3 <- numeric(n)
for (i in 1 : n) {
x<-rnorm(50,2,3)
x3[i] <- x[3]
}
set.seed(123)
n = 10
n.trial = 5000
x = c(1 : n)
y_true = 10 + 2 * x
sigma_eps = 15
beta_hat = numeric(n.trial)
for (trial in 1 : n.trial) {
y_obs = y_true + rnorm(n, 0, sigma_eps)
lm.l = lm(y_obs ~ x)
beta_hat[trial] = lm.l$coefficients[2]
}
hist(beta_hat)
mean(beta_hat)
sigma_eps / sqrt(sum((x-mean(x))^2))
sd(beta_hat)
qqnorm(beta_hat, cex = 0.5)
abline(mean(beta_hat), sd(beta_hat), col = 2)
a <- c(4, 4, 8)
b <- c(2, 1)
c <- a + b
power <- function(x, y) {
number <- x
exponent <- y
result <- number^exponent
cat("x =", x, "result =", result, "\n")
}
power(3,4)
# Store information about an applicant to a job position
applicant <- list(
degree = "Informatics",
languages = c("R", "JavaScript", "Python"),
interests = c("Healthcare", "Data Science")
)
applicant["languages"]
applicant[["languages"]]
applicant$languages
applicant[languages]
a <- 101
b <- 105
i <- 0
if(a > 102) {
b <- b + 1
i <- i + 1
} else {
a <- a - 1
i <- i + 1
}
cat("a =", a, ", b =", b, ", i =", i, "\n")
l <- list("a", "b", "c")
l[1:2]
`l[1:2]`
l$b
v <- 1:4
if(v > 2) cat("large ") else cat("small ")
v <- 1:4
if(v > 2) {cat("large ") else cat("small ")
v <- 1:4
if(v > 2) {
cat("large ")
} else {
cat("small ")
}
#!/usr/bin/env Rscript
### a4: data manipulation
## In this problem set we want you to programmatically print meaningful answers where applicable.
## For instance, if the question is What is the binge drinking rate in the US in 2012?, the answer
## should be something like this (as a comment):
## 2012 binge drinking rate in the US was 56%
##
## The printed answer should be brief and explanatory, so persons who know the data and questions
## can understand it. And it should be correct too! Also, be reasonable. If the question is to
## "create a subdata for year 2012", you just create the data and do not print out 3000 lines!
## When you run (source) your whole script, it should output the messages so they form a readable
## text. If in doubt imagine you are creating a report for Congress, for busy politicians who want
## to get the relevant answers quickly.
################################### Set up ###################################
## Install dplyr (if not installed)
## make sure you install it only once!
install.packages("dplyr")
## Print your working directory.
## Ensure it is an appropriate project folder
## getwd()
getwd()
setwd("~/INFO201/work-with-data-zihanlin112000")
## load dplyr package
library("dplyr")
# Read in `any_drinking.csv` data using relative path
any.drinking <- read.csv('data/any_drinking.csv')
# Read in `binge.drinking.csv` data using relative path
binge.drinking <- read.csv("data/binge_drinking.csv")
## Create a directory (using R) called "output" in your project directory
## Make sure the code works and does not print any warnings in case the directory already exists
dir.create("output", showWarnings = FALSE)
### -------------------- Any drinking in 2012 --------------------
## For this first section, you will work only with the *any drinking* dataset.
## In particular, we'll focus on data from 2012, keeping track of the `state` and `location` variables
## Create a data frame that has the `state` and `location` columns, and all columns with data from 2012
data.2012 <- select(any.drinking, state, location, both_sexes_2012, males_2012, females_2012)
## Using the 2012 data, create a column that has the difference in male and female drinking patterns
data.2012 <- mutate(data.2012, diff.male.female = males_2012 - females_2012)
## Write your 2012 data to a .csv file in your `output/` directory with a good descriptive filename
## Make sure to exclude rownames
getwd()
write.csv(data.2012, file = "output/2012_any_drinking_data.csv", row.names = FALSE)
## Create a *dataframe* of the locations, states, and differences for all locations where females drink more than males
## (no extra columns).
## Are there any locations where females drink more than males?
## Comment your result (as a comment)
females.more <- data.2012 %>%
filter(diff.male.female < 0) %>%
select(location, state, diff.male.female)
## There are no locations where females drink more than males.
## What is the location in which male and female drinking rates are most similar
## (*absolute* difference is smallest)?
## Your answer should be a *dataframe* of the location, state, and value of interest
## (no extra columns)
most.similar <- data.2012 %>%
filter(diff.male.female == min(abs(diff.male.female))) %>%
select(location, state, diff.male.female)
## As you've (hopefully) noticed, the `location` column includes national, state, and county level
## estimates.  However, many audiences may only be interested in the *state* level data.
## Given that, you should do the following:
## * Create a new data frame that is only the state level observations in 2012
## * For the sake of this analysis, you should treat Washington D.C. as a *state*
##
## Hint: check the 'state' and 'location' variables and think how to extract only
## state-level data
only.state <- filter(data.2012, location == state)
## Which state had the **highest** drinking rate for both sexes combined?
## Your answer should be a *dataframe* of the state and value of interest (no extra columns)
##
## For your check: this is Vermont
highest.data <- only.state %>%
filter(both_sexes_2012 == max(both_sexes_2012)) %>%
select(state, both_sexes_2012)
## Which state had the **lowest** drinking rate for both sexes combined?
## Your answer should be a *dataframe* of the state and value of interest (no extra columns)
lowest.data <- only.state %>%
filter(both_sexes_2012 == min(both_sexes_2012)) %>%
select(state, both_sexes_2012)
## What was the difference in (any-drinking) prevalence between the state with the highest level of
## consumption, and the state with the lowest level of consumption?
## Your answer should be a single value.
highest.difference <- select(highest.data, 2) - select(lowest.data, 2)
## Write your 2012 state data to an appropriately named file in your `output/` directory
## Make sure to exclude rownames
write.csv(only.state, file = "output/2012_any_drinking_STATE_data.csv", row.names = FALSE)
## Write a function that allows you to specify a state, then saves a .csv file with only observations from
## that state. This includes data about the state itself, as well as the counties within the state
## You should use the entire any.drinking dataset for this function
## The file you save in the `output` directory indicates the state name
## Make sure to exclude rownames
GetState <- function(state.name) {
state.selected.data <- any.drinking %>%
filter(state == state.name)
write.csv(state.selected.data, file = paste0("output/2012_", state.name, "_data.csv" ), row.names = FALSE)
}
## Demonstrate your function works by writing 3 .csv files of the states of your choice
GetState("Washington")
GetState("California")
GetState("Texas")
### -------------------- Binge drinking Dataset --------------------
## In this section, we'll ask a variety of questions regarding our binge drinking dataset
## Moreover, we'll be looking at a subset of the observations which is just the counties
## (i.e., exclude state/national estimates)
## In order to ask these questions, you'll need to first prepare a subset of the data for this section:
##
## Create a dataframe with only the county level observations from the binge_driking dataset
## This does include "county-like" areas such as parishes and boroughs
## You should (again) think of Washington D.C. as a state, and therefore *exclude it here*
only.county <- binge.drinking %>%
filter(state != location, state != "National")
## What is the average level of binge drinking in 2012 for both sexes (across the counties)?
## Just compute a single average number over all 3000 or so counties
## (but do not include the national and state level figures)
average.both.sexes.2012 <- only.county %>%
summarise(
mean = mean(both_sexes_2012)
)
## What is the *minimum* level of binge drinking in each state in 2012 for both sexes (across the
## counties)?
## It should contain roughly 50 values (one for each state), unless there are two counties in a
## state with the same value
## Your answer should be a *dataframe* with the 2012 binge drinking rate, location, and state
## Hint: use `group_by` function
state.min <- only.county %>%
group_by(state) %>%
filter(both_sexes_2012 == min(both_sexes_2012)) %>%
select(both_sexes_2012, location, state)
## Which county in Washington state had lowest level of binge drinking?  What was the level?
## Hint: 14.7, Franklin County
state.max <- only.county %>%
group_by(state) %>%
filter(both_sexes_2012 == max(both_sexes_2012)) %>%
select(both_sexes_2012, location, state)
## What is the county with the largest increase in male binge drinking between 2002 and 2012?
## Your answer should include the county, state, and value of interest
binge.drinking <- mutate(binge.drinking, males.diff = males_2002 - males_2012)
largest.increase <- binge.drinking %>%
filter(males.diff == max(males.diff)) %>%
select(location, state, males.diff)
## How many counties experienced an increase in male binge drinking between 2002 and 2012?
## Your answer should be an integer.
increased.males.data <- binge.drinking %>%
filter(males.diff > 0) %>%
count()
## What percentage of counties experienced an increase in male binge drinking between 2002 and 2012?
## Your answer should be a fraction or percent (but please state that in your output)
round(increased.males.data / count(binge.drinking) * 100, digits = 1)
## How many counties observed an increase in female binge drinking in this time period?
## Your answer should be an integer.
binge.drinking <- mutate(binge.drinking, females.diff = females_2012 - females_2002)
increase.in.female <- binge.drinking %>%
filter(females.diff > 0) %>%
count()
## What percentage of counties experienced an increase in female binge drinking between 2002 and 2012?
## Your answer should be a fraction or percent (we're not picky)
round(increased.females.data / count(binge.drinking) * 100, digits = 1)
## How many counties experienced a rise in female binge drinking *and* a decline in male binge drinking?
## Your answer should be an integer (a dataframe with only one value is fine)
## Hint: 786
female.rise.male.decline <- binge.drinking %>%
filter(females.diff > 0 & males.diff < 0) %>%
count()
### -------------------- Joining (merging) data --------------------
## You'll often have to join different datasets together in order to ask more involved questions of your
## dataset.
## Note that the dataframes include a large number of similar column names.
## You have either to rename these, or ensure that both will be renamed automatically
## with descriptive suffixes (or prefixes), such as '_any' and '_binge'.
colnames(binge.drinking)[3:length(binge.drinking)] <- paste0("_binge.", colnames(binge.drinking)[3:length(binge.drinking)])
## Join the dataframes: create a dataframe with all of the columns from both datasets.
## Think carefully about the *type* of join you want to do, and what the *keys*
## (identifiers) are
both.drinking <- full_join(any.drinking, binge.drinking)
## Create a column of difference between `any` and `binge` drinking for both sexes in 2012
any.binge.diff <- both.drinking %>%
select(contains("both_sexes_2012")) %>%
mutate(diff = any.binge.diff[, 1] - any.binge.diff[, 2])
both.drinking <- mutate(both.drinking, diff.any.binge = any.binge.diff$diff)
## Which location has the greatest *absolute* difference between `any` and `binge` drinking?
## Your answer should be a one row data frame with the state, location,
## and value of interest (difference)
## Hint: in Virginia
greatest.diff <- both.drinking %>%
filter(diff.any.binge == abs(max(diff.any.binge))) %>%
select(state, location, diff.any.binge)
## ------------------------------ Write a function to ask your own question(s) ------------------------------
## Even in an entry level data analyst role, people are expected to come up with their own questions
## of interest (not just answer the questions that other people have). For this section, you should
## *write a function* that allows you to ask the same question on different subsets of data. For
## example, you may want to ask about the highest/lowest drinking level given a state or year. The
## purpose of your function should be evident given the input parameters and function name. However,
## add also explanation of what it does and what are the input parameters in comments inside the
## function definition.
##
## Note: the question should be relevant for this data, i.e. related to drinking and geography,
## or any other
## interesting features this data is well suited for.  Do not ask questions you may get better answer
## from different data (e.g. only about geography).
## After writing your function, *demonstrate* that the function works by passing in different
## parameters to your function.
### -------------------- Challenge --------------------
## Using a dataframe of your choice from above, write a function that allows you to specify a *year* and
## *state* of interest,
## that saves a .csv file with observations from that state's counties (and the state itself)
## It should only write the columns `state`, `location`, and data from the specified year.
## Before writing the .csv file, you should *sort* the data_frame in descending order
## by the both_sexes drinking rate in the specified year.
## Again, make sure the file name you save in the output directory indicates the year and state,
## and that it does not include row names.
##
## Note: depending on how you approach this problem, you may confront how dplyr
## uses *non-standard evaluation*
## Hint: https://cran.r-project.org/web/packages/dplyr/vignettes/nse.html
## If you find this to be overwhelming, consider using the base-R indexing instead.
##
## Alternatively, I recommend to use 'tidyr' tools to transform the data into long form
## (tidy form), perform selection in long form, and transform it back into the wide form thereafter.
## Hint: https://r4ds.had.co.nz/tidy-data.html
##
GetCounties <- function(what.year, what.state) {
county.data  <- any.drinking %>%
filter(state == what.state) %>%
select(state, location, contains(what.year))
sorted.county <- arrange(county.data, desc(county.data[,3]))
write.csv(sorted.county, file = paste0("output/", what.year, " data from ", what.state, ".csv" ), row.names = FALSE)
}
## Demonstrate that your function works by passing a year and state of your interest to the function
GetCounties("2002", "California")
### analysis and images
install.packages("maps")
install.packages("tidyverse")
## Set up
library(tidyverse)
library(maps)
library(ggplot2)
data <- read.delim("/Users/zihanlin/Desktop/INFO201/plot-zihanlin112000/incarceration_trends.csv", header = FALSE, sep = ",")
View(data)
data <- read.delim("/Users/zihanlin/Desktop/INFO201/plot-zihanlin112000/incarceration_trends.csv", header = TRUE, sep = ",")
View(data)
install.packages(tidyverse)
install.packages("tidyverse)
install.packages("tidyverse")
install.packages("maps")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("knitr")
shiny::runApp('Desktop/INFO201/info201_project/MusicRec')
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
